import * as validator from 'validator';
import { CustomValidator } from '../base';
import { ContextBuilder } from '../context-builder';
import { Validators } from './validators';
export declare class ValidatorsImpl<Chain> implements Validators<Chain> {
    private readonly builder;
    private readonly chain;
    private lastValidator;
    private negateNext;
    constructor(builder: ContextBuilder, chain: Chain);
    private addItem;
    not(): Chain;
    withMessage(message: any): Chain;
    custom(validator: CustomValidator): Chain;
    exists(options?: {
        checkFalsy?: boolean;
        checkNull?: boolean;
    }): Chain;
    isArray(): Chain;
    isString(): Chain;
    private addStandardValidation;
    contains(elem: any): Chain;
    equals(comparison: string): Chain;
    isAfter(date?: string): Chain;
    isAlpha(locale?: validator.AlphaLocale): Chain;
    isAlphanumeric(locale?: validator.AlphanumericLocale): Chain;
    isAscii(): Chain;
    isBase32(): Chain;
    isBase64(): Chain;
    isBefore(date?: string): Chain;
    isBoolean(): Chain;
    isByteLength(options: validator.Options.MinMaxOptions): Chain;
    isCreditCard(): Chain;
    isCurrency(options?: validator.Options.IsCurrencyOptions): Chain;
    isDataURI(): Chain;
    isDecimal(options?: validator.Options.IsDecimalOptions): Chain;
    isDivisibleBy(number: number): Chain;
    isEmail(options?: validator.Options.IsEmailOptions): Chain;
    isEmpty(options?: validator.Options.IsEmptyOptions): Chain;
    isFQDN(options?: validator.Options.IsFQDNOptions): Chain;
    isFloat(options?: validator.Options.IsFloatOptions): Chain;
    isFullWidth(): Chain;
    isHalfWidth(): Chain;
    isHash(algorithm: validator.HashAlgorithm): Chain;
    isHexColor(): Chain;
    isHexadecimal(): Chain;
    isIdentityCard(locale: ['ES'] | 'any'): Chain;
    isIP(version?: validator.IPVersion): Chain;
    isIPRange(): Chain;
    isISBN(version?: number): Chain;
    isISSN(options?: validator.Options.IsISSNOptions): Chain;
    isISIN(): Chain;
    isISO8601(options?: validator.Options.IsISO8601Options): Chain;
    isISO31661Alpha2(): Chain;
    isISO31661Alpha3(): Chain;
    isISRC(): Chain;
    isIn(values: any[]): Chain;
    isInt(options?: validator.Options.IsIntOptions): Chain;
    isJSON(): Chain;
    isJWT(): Chain;
    isLatLong(): Chain;
    isLength(options: validator.Options.MinMaxOptions): Chain;
    isLowercase(): Chain;
    isMagnetURI(): Chain;
    isMACAddress(options?: validator.Options.IsMACAddressOptions): Chain;
    isMD5(): Chain;
    isMimeType(): Chain;
    isMobilePhone(locale: validator.MobilePhoneLocale, options?: validator.Options.IsMobilePhoneOptions): Chain;
    isMongoId(): Chain;
    isMultibyte(): Chain;
    isNumeric(options?: validator.Options.IsNumericOptions): Chain;
    isPort(): Chain;
    isPostalCode(locale: validator.PostalCodeLocale): Chain;
    isRFC3339(): Chain;
    isSurrogatePair(): Chain;
    isURL(options?: validator.Options.IsURLOptions): Chain;
    isUUID(version?: validator.UUIDVersion): Chain;
    isUppercase(): Chain;
    isVariableWidth(): Chain;
    isWhitelisted(chars: string | string[]): Chain;
    matches(pattern: RegExp | string, modifiers?: string): Chain;
}
